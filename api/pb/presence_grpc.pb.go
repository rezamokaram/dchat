// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: presence.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PresenceService_SetUserPresence_FullMethodName     = "/PresenceService/SetUserPresence"
	PresenceService_DeleteUserPresence_FullMethodName  = "/PresenceService/DeleteUserPresence"
	PresenceService_GetUserPresence_FullMethodName     = "/PresenceService/GetUserPresence"
	PresenceService_GetUsersPresence_FullMethodName    = "/PresenceService/GetUsersPresence"
	PresenceService_GetRoomPresenceData_FullMethodName = "/PresenceService/GetRoomPresenceData"
)

// PresenceServiceClient is the client API for PresenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PresenceServiceClient interface {
	SetUserPresence(ctx context.Context, in *SetUserPresenceRequest, opts ...grpc.CallOption) (*SetUserPresenceResponse, error)
	DeleteUserPresence(ctx context.Context, in *DeleteUserPresenceRequest, opts ...grpc.CallOption) (*DeleteUserPresenceResponse, error)
	GetUserPresence(ctx context.Context, in *GetUserPresenceRequest, opts ...grpc.CallOption) (*GetUserPresenceResponse, error)
	GetUsersPresence(ctx context.Context, in *GetUsersPresenceRequest, opts ...grpc.CallOption) (*GetUsersPresenceResponse, error)
	GetRoomPresenceData(ctx context.Context, in *GetRoomPresenceDataRequest, opts ...grpc.CallOption) (*GetRoomPresenceDataResponse, error)
}

type presenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPresenceServiceClient(cc grpc.ClientConnInterface) PresenceServiceClient {
	return &presenceServiceClient{cc}
}

func (c *presenceServiceClient) SetUserPresence(ctx context.Context, in *SetUserPresenceRequest, opts ...grpc.CallOption) (*SetUserPresenceResponse, error) {
	out := new(SetUserPresenceResponse)
	err := c.cc.Invoke(ctx, PresenceService_SetUserPresence_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presenceServiceClient) DeleteUserPresence(ctx context.Context, in *DeleteUserPresenceRequest, opts ...grpc.CallOption) (*DeleteUserPresenceResponse, error) {
	out := new(DeleteUserPresenceResponse)
	err := c.cc.Invoke(ctx, PresenceService_DeleteUserPresence_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presenceServiceClient) GetUserPresence(ctx context.Context, in *GetUserPresenceRequest, opts ...grpc.CallOption) (*GetUserPresenceResponse, error) {
	out := new(GetUserPresenceResponse)
	err := c.cc.Invoke(ctx, PresenceService_GetUserPresence_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presenceServiceClient) GetUsersPresence(ctx context.Context, in *GetUsersPresenceRequest, opts ...grpc.CallOption) (*GetUsersPresenceResponse, error) {
	out := new(GetUsersPresenceResponse)
	err := c.cc.Invoke(ctx, PresenceService_GetUsersPresence_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presenceServiceClient) GetRoomPresenceData(ctx context.Context, in *GetRoomPresenceDataRequest, opts ...grpc.CallOption) (*GetRoomPresenceDataResponse, error) {
	out := new(GetRoomPresenceDataResponse)
	err := c.cc.Invoke(ctx, PresenceService_GetRoomPresenceData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PresenceServiceServer is the server API for PresenceService service.
// All implementations must embed UnimplementedPresenceServiceServer
// for forward compatibility
type PresenceServiceServer interface {
	SetUserPresence(context.Context, *SetUserPresenceRequest) (*SetUserPresenceResponse, error)
	DeleteUserPresence(context.Context, *DeleteUserPresenceRequest) (*DeleteUserPresenceResponse, error)
	GetUserPresence(context.Context, *GetUserPresenceRequest) (*GetUserPresenceResponse, error)
	GetUsersPresence(context.Context, *GetUsersPresenceRequest) (*GetUsersPresenceResponse, error)
	GetRoomPresenceData(context.Context, *GetRoomPresenceDataRequest) (*GetRoomPresenceDataResponse, error)
	mustEmbedUnimplementedPresenceServiceServer()
}

// UnimplementedPresenceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPresenceServiceServer struct {
}

func (UnimplementedPresenceServiceServer) SetUserPresence(context.Context, *SetUserPresenceRequest) (*SetUserPresenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserPresence not implemented")
}
func (UnimplementedPresenceServiceServer) DeleteUserPresence(context.Context, *DeleteUserPresenceRequest) (*DeleteUserPresenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserPresence not implemented")
}
func (UnimplementedPresenceServiceServer) GetUserPresence(context.Context, *GetUserPresenceRequest) (*GetUserPresenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPresence not implemented")
}
func (UnimplementedPresenceServiceServer) GetUsersPresence(context.Context, *GetUsersPresenceRequest) (*GetUsersPresenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersPresence not implemented")
}
func (UnimplementedPresenceServiceServer) GetRoomPresenceData(context.Context, *GetRoomPresenceDataRequest) (*GetRoomPresenceDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomPresenceData not implemented")
}
func (UnimplementedPresenceServiceServer) mustEmbedUnimplementedPresenceServiceServer() {}

// UnsafePresenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PresenceServiceServer will
// result in compilation errors.
type UnsafePresenceServiceServer interface {
	mustEmbedUnimplementedPresenceServiceServer()
}

func RegisterPresenceServiceServer(s grpc.ServiceRegistrar, srv PresenceServiceServer) {
	s.RegisterService(&PresenceService_ServiceDesc, srv)
}

func _PresenceService_SetUserPresence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserPresenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServiceServer).SetUserPresence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PresenceService_SetUserPresence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServiceServer).SetUserPresence(ctx, req.(*SetUserPresenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresenceService_DeleteUserPresence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserPresenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServiceServer).DeleteUserPresence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PresenceService_DeleteUserPresence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServiceServer).DeleteUserPresence(ctx, req.(*DeleteUserPresenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresenceService_GetUserPresence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPresenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServiceServer).GetUserPresence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PresenceService_GetUserPresence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServiceServer).GetUserPresence(ctx, req.(*GetUserPresenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresenceService_GetUsersPresence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersPresenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServiceServer).GetUsersPresence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PresenceService_GetUsersPresence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServiceServer).GetUsersPresence(ctx, req.(*GetUsersPresenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresenceService_GetRoomPresenceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomPresenceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServiceServer).GetRoomPresenceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PresenceService_GetRoomPresenceData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServiceServer).GetRoomPresenceData(ctx, req.(*GetRoomPresenceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PresenceService_ServiceDesc is the grpc.ServiceDesc for PresenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PresenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PresenceService",
	HandlerType: (*PresenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetUserPresence",
			Handler:    _PresenceService_SetUserPresence_Handler,
		},
		{
			MethodName: "DeleteUserPresence",
			Handler:    _PresenceService_DeleteUserPresence_Handler,
		},
		{
			MethodName: "GetUserPresence",
			Handler:    _PresenceService_GetUserPresence_Handler,
		},
		{
			MethodName: "GetUsersPresence",
			Handler:    _PresenceService_GetUsersPresence_Handler,
		},
		{
			MethodName: "GetRoomPresenceData",
			Handler:    _PresenceService_GetRoomPresenceData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "presence.proto",
}
